// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package mindspheresinglesignon.actions;

import java.util.Optional;
import org.jose4j.jwt.JwtClaims;
import org.jose4j.jwt.MalformedClaimException;
import org.jose4j.jwt.consumer.InvalidJwtException;
import org.jose4j.jwt.consumer.JwtConsumer;
import org.jose4j.jwt.consumer.JwtConsumerBuilder;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.logging.ILogNode;
import com.mendix.m2ee.api.IMxRuntimeRequest;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import mindspheresinglesignon.CredentialsHandler;
import mindspheresinglesignon.proxies.CredentialsResponse;
import mindspheresinglesignon.proxies.MindSphereAccount;
import mindspheresinglesignon.proxies.MindSphereToken;
import mindspheresinglesignon.proxies.TokenForScheduledEvents;
import mindspheresinglesignon.proxies.constants.Constants;
import mindspheresinglesignon.proxies.microflows.Microflows;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class GetAccessToken extends CustomJavaAction<IMendixObject>
{
	public GetAccessToken(IContext context)
	{
		super(context);
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		MindSphereToken accessToken = new MindSphereToken(context());
		if (System.getenv("VCAP_SERVICES") == null) {
			local(accessToken);
		} else {
			cloud(accessToken);
		}
		return accessToken.getMendixObject();
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "GetAccessToken";
	}

	// BEGIN EXTRA CODE
	protected static ILogNode LOGGER = Core.getLogger(Constants.getModuleName());
	protected static JwtConsumer jwtConsumer = new JwtConsumerBuilder()				
			.setSkipAllDefaultValidators()
			.setSkipSignatureVerification()				
			.build();
	
	private void cloud(MindSphereToken accessToken) throws InvalidJwtException, MalformedClaimException {
		Optional<IMxRuntimeRequest> mayBeIMxRuntimeRequest = context().getRuntimeRequest();
		if (mayBeIMxRuntimeRequest.isPresent()) {
			accessToken.setAccess_token(mayBeIMxRuntimeRequest.get().getHeader("authorization"));
			addTenant(accessToken);
			
		}
	}

	private void local(MindSphereToken accessToken) { //
		Optional<IMxRuntimeRequest> mayBeIMxRuntimeRequest = context().getRuntimeRequest();
		if (mayBeIMxRuntimeRequest.isPresent()) {
			CredentialsResponse ACResponse = CredentialsHandler.retrievCredentialsResponsFromSession(mayBeIMxRuntimeRequest.get()); 					
			if (ACResponse != null) {				
				// Check if token is still valid.
				if (ACResponse.getExpires_at().getTime() > System.currentTimeMillis()) {
					accessToken.setAccess_token(ACResponse.getToken_type() + " " + ACResponse.getAccess_token());									
				} else {
					// Try to fetch new Token via "DS_WorkerTokenForTenant"						
					try {
						MindSphereAccount account = Microflows.dS_MindSphereAccount(context());				
						TokenForScheduledEvents wt = Microflows.dS_GetAccessTokenForScheduledEvents(context(), account.getMindSphereAccount_Tenant());						
						// We have to use a SudoClone to read the Access_Token
						accessToken.setAccess_token(wt.getAccess_Token(context().createSudoClone()));
					} catch (CoreException e) {
						LOGGER.error(e.getMessage());						
					}
				}
				this.addTenant(accessToken);
			}
		}
	}	
	
	private void addTenant(MindSphereToken accessToken) {				
		try {
			String jwt = accessToken.getAccess_token().replaceFirst("(?i)bearer ","");	
			JwtClaims claims = jwtConsumer.processToClaims(jwt);
			accessToken.setTenant(claims.getStringClaimValue("ten"));
		} catch (InvalidJwtException e) {
			LOGGER.error(e.getMessage());
		} catch (MalformedClaimException e) {
			LOGGER.error(e.getMessage());
		}		
	}
	// END EXTRA CODE
}
